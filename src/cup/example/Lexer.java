/* The following code was generated by JFlex 1.3.5 on 11/21/20, 11:06 PM */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/21/20, 11:06 PM from the specification file
 * <tt>file:/E:/Eclipse workspace/PCat_Compilatoare/lexer.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\12\1\3\1\1\1\0\1\4\1\2\16\12\4\0\1\4\1\0"+
    "\1\10\1\0\1\11\3\0\1\5\1\7\1\6\1\16\1\25\1\15"+
    "\1\26\1\17\1\14\11\13\1\22\1\24\1\20\1\23\1\21\2\0"+
    "\1\33\1\40\1\55\1\35\1\41\1\50\1\42\1\57\1\43\2\11"+
    "\1\46\1\54\1\34\1\45\1\53\1\11\1\36\1\47\1\52\1\56"+
    "\1\44\1\60\1\51\1\37\1\11\1\27\1\0\1\30\1\0\1\11"+
    "\1\0\32\11\1\31\1\0\1\32\1\0\41\12\2\0\4\11\4\0"+
    "\1\11\2\0\1\12\7\0\1\11\4\0\1\11\5\0\27\11\1\0"+
    "\37\11\1\0\u01ca\11\4\0\14\11\16\0\5\11\7\0\1\11\1\0"+
    "\1\11\21\0\160\12\5\11\1\0\2\11\2\0\4\11\1\0\1\11"+
    "\6\0\1\11\1\0\3\11\1\0\1\11\1\0\24\11\1\0\123\11"+
    "\1\0\213\11\1\0\5\12\2\0\246\11\1\0\46\11\2\0\1\11"+
    "\6\0\51\11\6\0\1\11\1\0\55\12\1\0\1\12\1\0\2\12"+
    "\1\0\2\12\1\0\1\12\10\0\33\11\4\0\4\11\15\0\6\12"+
    "\5\0\1\11\4\0\13\12\1\0\1\12\3\0\53\11\37\12\4\0"+
    "\2\11\1\12\143\11\1\0\1\11\10\12\1\0\6\12\2\11\2\12"+
    "\1\0\4\12\2\11\12\12\3\11\2\0\1\11\17\0\1\12\1\11"+
    "\1\12\36\11\33\12\2\0\131\11\13\12\1\11\16\0\12\12\41\11"+
    "\11\12\2\11\4\0\1\11\2\0\1\12\30\11\4\12\1\11\11\12"+
    "\1\11\3\12\1\11\5\12\22\0\31\11\3\12\4\0\13\11\65\0"+
    "\25\11\1\0\10\11\25\0\61\12\66\11\3\12\1\11\22\12\1\11"+
    "\7\12\12\11\2\12\2\0\12\12\1\0\20\11\3\12\1\0\10\11"+
    "\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11\3\0\4\11"+
    "\2\0\1\12\1\11\7\12\2\0\2\12\2\0\3\12\1\11\10\0"+
    "\1\12\4\0\2\11\1\0\3\11\2\12\2\0\12\12\4\11\7\0"+
    "\2\11\1\0\1\12\2\0\3\12\1\0\6\11\4\0\2\11\2\0"+
    "\26\11\1\0\7\11\1\0\2\11\1\0\2\11\1\0\2\11\2\0"+
    "\1\12\1\0\5\12\4\0\2\12\2\0\3\12\3\0\1\12\7\0"+
    "\4\11\1\0\1\11\7\0\14\12\3\11\1\12\13\0\3\12\1\0"+
    "\11\11\1\0\3\11\1\0\26\11\1\0\7\11\1\0\2\11\1\0"+
    "\5\11\2\0\1\12\1\11\10\12\1\0\3\12\1\0\3\12\2\0"+
    "\1\11\17\0\2\11\2\12\2\0\12\12\1\0\1\11\7\0\1\11"+
    "\6\12\1\0\3\12\1\0\10\11\2\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\2\11\1\0\5\11\2\0\1\12\1\11\7\12\2\0"+
    "\2\12\2\0\3\12\10\0\2\12\4\0\2\11\1\0\3\11\2\12"+
    "\2\0\12\12\1\0\1\11\20\0\1\12\1\11\1\0\6\11\3\0"+
    "\3\11\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0"+
    "\2\11\3\0\3\11\3\0\14\11\4\0\5\12\3\0\3\12\1\0"+
    "\4\12\2\0\1\11\6\0\1\12\16\0\12\12\11\0\1\11\6\0"+
    "\5\12\10\11\1\0\3\11\1\0\27\11\1\0\20\11\3\0\1\11"+
    "\7\12\1\0\3\12\1\0\4\12\7\0\2\12\1\0\3\11\5\0"+
    "\2\11\2\12\2\0\12\12\20\0\1\11\3\12\1\0\10\11\1\0"+
    "\3\11\1\0\27\11\1\0\12\11\1\0\5\11\2\0\1\12\1\11"+
    "\7\12\1\0\3\12\1\0\4\12\7\0\2\12\7\0\1\11\1\0"+
    "\2\11\2\12\2\0\12\12\1\0\2\11\15\0\4\12\1\0\10\11"+
    "\1\0\3\11\1\0\51\11\2\12\1\11\7\12\1\0\3\12\1\0"+
    "\4\12\1\11\5\0\3\11\1\12\7\0\3\11\2\12\2\0\12\12"+
    "\12\0\6\11\2\0\2\12\1\0\22\11\3\0\30\11\1\0\11\11"+
    "\1\0\1\11\2\0\7\11\3\0\1\12\4\0\6\12\1\0\1\12"+
    "\1\0\10\12\6\0\12\12\2\0\2\12\15\0\60\11\1\12\2\11"+
    "\7\12\4\0\10\11\10\12\1\0\12\12\47\0\2\11\1\0\1\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11"+
    "\1\0\3\11\1\0\1\11\1\0\1\11\2\0\2\11\1\0\4\11"+
    "\1\12\2\11\6\12\1\0\2\12\1\11\2\0\5\11\1\0\1\11"+
    "\1\0\6\12\2\0\12\12\2\0\4\11\40\0\1\11\27\0\2\12"+
    "\6\0\12\12\13\0\1\12\1\0\1\12\1\0\1\12\4\0\2\12"+
    "\10\11\1\0\44\11\4\0\24\12\1\0\2\12\5\11\13\12\1\0"+
    "\44\12\11\0\1\12\71\0\53\11\24\12\1\11\12\12\6\0\6\11"+
    "\4\12\4\11\3\12\1\11\3\12\2\11\7\12\3\11\4\12\15\11"+
    "\14\12\1\11\17\12\2\0\46\11\1\0\1\11\5\0\1\11\2\0"+
    "\53\11\1\0\u014d\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0"+
    "\4\11\2\0\51\11\1\0\4\11\2\0\41\11\1\0\4\11\2\0"+
    "\7\11\1\0\1\11\1\0\4\11\2\0\17\11\1\0\71\11\1\0"+
    "\4\11\2\0\103\11\2\0\3\12\40\0\20\11\20\0\126\11\2\0"+
    "\6\11\3\0\u026c\11\2\0\21\11\1\0\32\11\5\0\113\11\3\0"+
    "\13\11\7\0\15\11\1\0\4\11\3\12\13\0\22\11\3\12\13\0"+
    "\22\11\2\12\14\0\15\11\1\0\3\11\1\0\2\12\14\0\64\11"+
    "\40\12\3\0\1\11\3\0\2\11\1\12\2\0\12\12\41\0\4\12"+
    "\1\0\12\12\6\0\131\11\7\0\5\11\2\12\42\11\1\12\1\11"+
    "\5\0\106\11\12\0\37\11\1\0\14\12\4\0\14\12\12\0\12\12"+
    "\36\11\2\0\5\11\13\0\54\11\4\0\32\11\6\0\12\12\46\0"+
    "\27\11\5\12\4\0\65\11\12\12\1\0\35\12\2\0\13\12\6\0"+
    "\12\12\15\0\1\11\10\0\16\12\102\0\5\12\57\11\21\12\7\11"+
    "\4\0\12\12\21\0\11\12\14\0\3\12\36\11\15\12\2\11\12\12"+
    "\54\11\16\12\14\0\44\11\24\12\10\0\12\12\3\0\3\11\12\12"+
    "\44\11\2\0\11\11\7\0\53\11\2\0\3\11\20\0\3\12\1\0"+
    "\25\12\4\11\1\12\4\11\3\12\2\11\3\12\6\0\300\11\72\12"+
    "\1\0\5\12\u0116\11\2\0\6\11\2\0\46\11\2\0\6\11\2\0"+
    "\10\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\37\11\2\0"+
    "\65\11\1\0\7\11\1\0\1\11\3\0\3\11\1\0\7\11\3\0"+
    "\4\11\2\0\6\11\4\0\15\11\5\0\3\11\1\0\7\11\16\0"+
    "\5\12\32\0\5\12\20\0\2\11\23\0\1\11\13\0\5\12\1\0"+
    "\12\12\1\0\1\11\15\0\1\11\20\0\15\11\3\0\40\11\20\0"+
    "\15\12\4\0\1\12\3\0\14\12\21\0\1\11\4\0\1\11\2\0"+
    "\12\11\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\4\11\1\0\13\11\2\0\4\11\5\0\5\11\4\0"+
    "\1\11\21\0\51\11\u0a77\0\57\11\1\0\57\11\1\0\205\11\6\0"+
    "\4\11\3\12\2\11\14\0\46\11\1\0\1\11\5\0\1\11\2\0"+
    "\70\11\7\0\1\11\17\0\1\12\27\11\11\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11"+
    "\1\0\7\11\1\0\40\12\57\0\1\11\u01d5\0\3\11\31\0\11\11"+
    "\6\12\1\0\5\11\2\0\5\11\4\0\126\11\2\0\2\12\2\0"+
    "\3\11\1\0\132\11\1\0\4\11\5\0\53\11\1\0\136\11\21\0"+
    "\33\11\65\0\20\11\u0200\0\u19b6\11\112\0\u51f0\11\20\0\u048d\11\103\0"+
    "\56\11\2\0\u010d\11\3\0\20\11\12\12\2\11\24\0\57\11\1\12"+
    "\4\0\12\12\1\0\37\11\2\12\120\11\2\12\45\0\11\11\2\0"+
    "\147\11\2\0\57\11\75\0\13\11\1\12\3\11\1\12\4\11\1\12"+
    "\27\11\5\12\20\0\1\11\7\0\64\11\14\0\2\12\62\11\22\12"+
    "\12\0\12\12\6\0\22\12\6\11\3\0\1\11\1\0\2\11\13\12"+
    "\34\11\10\12\2\0\27\11\15\12\14\0\35\11\3\0\4\12\57\11"+
    "\16\12\16\0\1\11\12\12\6\0\5\11\1\12\12\11\12\12\5\11"+
    "\1\0\51\11\16\12\11\0\3\11\1\12\10\11\2\12\2\0\12\12"+
    "\6\0\27\11\3\0\1\11\3\12\62\11\1\12\1\11\3\12\2\11"+
    "\2\12\5\11\2\12\1\11\1\12\1\11\30\0\3\11\2\0\13\11"+
    "\5\12\2\0\3\11\2\12\12\0\6\11\2\0\6\11\2\0\6\11"+
    "\11\0\7\11\1\0\7\11\1\0\53\11\1\0\12\11\12\0\163\11"+
    "\10\12\1\0\2\12\2\0\12\12\6\0\u2ba4\11\14\0\27\11\4\0"+
    "\61\11\u2104\0\u016e\11\2\0\152\11\46\0\7\11\14\0\5\11\5\0"+
    "\1\11\1\12\12\11\1\0\15\11\1\0\5\11\1\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11\2\0"+
    "\66\11\50\0\15\11\3\0\20\12\20\0\20\12\3\0\2\11\30\0"+
    "\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\12\4\0"+
    "\1\11\13\0\12\12\7\0\32\11\4\0\1\11\1\0\32\11\13\0"+
    "\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11\3\0"+
    "\2\11\3\0\2\11\22\0\3\12\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    49,    49,    98,   147,    49,    49,   196,   245,   294, 
       49,    49,    49,    49,   343,   392,   441,    49,    49,    49, 
       49,   490,    49,    49,    49,   539,   588,   637,   686,   735, 
      784,   833,   882,   931,   980,  1029,  1078,  1127,  1176,  1225, 
     1274,  1323,   196,   196,    49,    49,    49,    49,    49,    49, 
     1372,  1421,  1470,  1519,   245,  1568,   245,  1617,  1666,  1715, 
     1764,  1813,   245,   245,  1862,   245,   245,  1911,  1960,  2009, 
     2058,   245,  2107,  2156,  2205,  2254,  2303,  2352,   245,  2401, 
      245,   245,  2450,  2499,  2548,  2597,   245,  2646,  2695,  2744, 
      245,  2793,  2842,   245,  2891,  2940,  2989,   245,  3038,  3087, 
     3136,  3185,   245,   245,  3234,  3283,  3332,   245,  3381,   245, 
     3430,   245,  3479,   245,   245,  3528,  3577,  3626,  3675,    49, 
     3724,   245,  3773,  3822,   245,   245,  3871,  3920,  3969,  4018, 
      245,   245,   245,   245,  4067,   245,  4116,  4165,   245,   245, 
     4214,  4263,   245
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\1\4\2\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\11\1\36"+
    "\1\37\1\11\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\11\1\46\1\47\1\50\3\11\1\51\62\0\1\3"+
    "\65\0\1\52\52\0\1\53\3\0\4\53\1\54\50\53"+
    "\11\0\4\11\16\0\26\11\13\0\2\12\65\0\1\55"+
    "\1\0\1\56\60\0\1\57\4\0\1\60\53\0\1\61"+
    "\55\0\1\62\51\0\4\11\16\0\1\11\1\63\1\11"+
    "\1\64\22\11\11\0\4\11\16\0\12\11\1\65\13\11"+
    "\11\0\4\11\16\0\10\11\1\66\1\11\1\67\13\11"+
    "\11\0\4\11\16\0\6\11\1\70\17\11\11\0\4\11"+
    "\16\0\4\11\1\71\1\11\1\72\17\11\11\0\4\11"+
    "\16\0\1\11\1\73\11\11\1\74\2\11\1\75\7\11"+
    "\11\0\4\11\16\0\1\11\1\76\12\11\1\77\1\100"+
    "\10\11\11\0\4\11\16\0\1\101\25\11\11\0\4\11"+
    "\16\0\3\11\1\102\11\11\1\103\10\11\11\0\4\11"+
    "\16\0\12\11\1\104\13\11\11\0\4\11\16\0\17\11"+
    "\1\105\6\11\11\0\4\11\16\0\12\11\1\106\13\11"+
    "\11\0\4\11\16\0\4\11\1\107\5\11\1\110\11\11"+
    "\1\111\1\11\11\0\4\11\16\0\3\11\1\112\22\11"+
    "\11\0\4\11\16\0\12\11\1\113\13\11\11\0\4\11"+
    "\16\0\3\11\1\114\20\11\1\115\1\11\1\52\3\0"+
    "\2\52\1\116\52\52\11\0\4\11\16\0\2\11\1\117"+
    "\23\11\11\0\4\11\16\0\3\11\1\120\22\11\11\0"+
    "\4\11\16\0\17\11\1\121\6\11\11\0\4\11\16\0"+
    "\11\11\1\122\14\11\11\0\4\11\16\0\1\123\16\11"+
    "\1\124\2\11\1\125\3\11\11\0\4\11\16\0\7\11"+
    "\1\126\16\11\11\0\4\11\16\0\2\11\1\127\23\11"+
    "\11\0\4\11\16\0\14\11\1\130\11\11\11\0\4\11"+
    "\16\0\10\11\1\131\15\11\11\0\4\11\16\0\17\11"+
    "\1\132\6\11\11\0\4\11\16\0\3\11\1\133\22\11"+
    "\11\0\4\11\16\0\12\11\1\134\13\11\11\0\4\11"+
    "\16\0\3\11\1\135\22\11\11\0\4\11\16\0\3\11"+
    "\1\136\22\11\11\0\4\11\16\0\20\11\1\137\5\11"+
    "\11\0\4\11\16\0\6\11\1\140\17\11\11\0\4\11"+
    "\16\0\12\11\1\141\13\11\11\0\4\11\16\0\2\11"+
    "\1\142\23\11\11\0\4\11\16\0\10\11\1\143\15\11"+
    "\11\0\4\11\16\0\10\11\1\144\15\11\1\52\3\0"+
    "\2\52\1\116\1\145\51\52\11\0\4\11\16\0\1\146"+
    "\25\11\11\0\4\11\16\0\2\11\1\147\10\11\1\150"+
    "\12\11\11\0\4\11\16\0\23\11\1\151\2\11\11\0"+
    "\4\11\16\0\12\11\1\152\13\11\11\0\4\11\16\0"+
    "\10\11\1\153\15\11\11\0\4\11\16\0\6\11\1\154"+
    "\1\11\1\155\15\11\11\0\4\11\16\0\17\11\1\156"+
    "\6\11\11\0\4\11\16\0\6\11\1\157\17\11\11\0"+
    "\4\11\16\0\20\11\1\160\5\11\11\0\4\11\16\0"+
    "\10\11\1\161\15\11\11\0\4\11\16\0\6\11\1\162"+
    "\17\11\11\0\4\11\16\0\1\11\1\163\24\11\11\0"+
    "\4\11\16\0\7\11\1\164\12\11\1\165\3\11\11\0"+
    "\4\11\16\0\17\11\1\166\6\11\11\0\4\11\16\0"+
    "\13\11\1\167\12\11\1\52\1\170\1\171\1\0\2\52"+
    "\1\116\52\52\11\0\4\11\16\0\4\11\1\172\21\11"+
    "\11\0\4\11\16\0\3\11\1\173\22\11\11\0\4\11"+
    "\16\0\3\11\1\174\22\11\11\0\4\11\16\0\1\11"+
    "\1\175\24\11\11\0\4\11\16\0\15\11\1\176\10\11"+
    "\11\0\4\11\16\0\7\11\1\177\16\11\11\0\4\11"+
    "\16\0\1\11\1\200\24\11\11\0\4\11\16\0\3\11"+
    "\1\201\22\11\11\0\4\11\16\0\6\11\1\202\17\11"+
    "\11\0\4\11\16\0\6\11\1\203\17\11\11\0\4\11"+
    "\16\0\6\11\1\204\17\11\1\0\1\170\70\0\4\11"+
    "\16\0\1\11\1\205\24\11\11\0\4\11\16\0\2\11"+
    "\1\206\23\11\11\0\4\11\16\0\6\11\1\207\17\11"+
    "\11\0\4\11\16\0\7\11\1\210\16\11\11\0\4\11"+
    "\16\0\1\211\25\11\11\0\4\11\16\0\2\11\1\212"+
    "\23\11\11\0\4\11\16\0\3\11\1\213\22\11\11\0"+
    "\4\11\16\0\21\11\1\214\4\11\11\0\4\11\16\0"+
    "\23\11\1\215\2\11\11\0\4\11\16\0\3\11\1\216"+
    "\22\11\11\0\4\11\16\0\6\11\1\217\17\11";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  9,  1,  1,  9,  9,  1,  1,  1,  9,  9,  9,  9,  1,  1, 
     1,  9,  9,  9,  9,  1,  9,  9,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  1,  9,  9,  9,  9, 
     9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */

public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
	this(is);
	symbolFactory = sf;
}

public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
	this(reader);
	symbolFactory = sf;
}

private StringBuffer sb;
private ComplexSymbolFactory symbolFactory;
private int csline, cscolumn;

public Symbol symbol(String name, int code) {
    return symbolFactory.newSymbol(name, code,
    				new Location(yyline + 1, yycolumn + 1, yychar),
    				new Location(yyline + 1, yycolumn + yylength(), yychar + yylength())
    				);
}

public Symbol symbol(String name, int code, String lexem) {
    return symbolFactory.newSymbol(name, code,
    				new Location(yyline + 1, yycolumn + 1, yychar),
    				new Location(yyline + 1, yycolumn + yylength(), yychar + yylength())
    				);
}

private void error(String message) {
   System.out.println("Error at line "+ (yyline+1) + ", column " + (yycolumn+ 1)+ " : "+message);
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[4312];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 54: 
          {  return symbolFactory.newSymbol("DO", DO);  }
        case 144: break;
        case 56: 
          {  return symbolFactory.newSymbol("BY", BY);  }
        case 145: break;
        case 62: 
          {  return symbolFactory.newSymbol("IS", IS);  }
        case 146: break;
        case 63: 
          {  return symbolFactory.newSymbol("IF", IF);  }
        case 147: break;
        case 65: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 148: break;
        case 66: 
          {  return symbolFactory.newSymbol("OF", OF);  }
        case 149: break;
        case 71: 
          {  return symbolFactory.newSymbol("TO", TO);  }
        case 150: break;
        case 47: 
          {  return symbolFactory.newSymbol("GREATERRSQBKT", GREATERRSQBKT);  }
        case 151: break;
        case 139: 
          {  return symbolFactory.newSymbol("PROGRAM", PROGRAM);  }
        case 152: break;
        case 138: 
          {  return symbolFactory.newSymbol("INTEGER", INTEGER);  }
        case 153: break;
        case 15: 
          {  return symbolFactory.newSymbol("GREATER", GREATER);  }
        case 154: break;
        case 8: 
        case 25: 
        case 26: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 50: 
        case 51: 
        case 52: 
        case 53: 
        case 55: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 64: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 79: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 87: 
        case 88: 
        case 89: 
        case 91: 
        case 92: 
        case 94: 
        case 95: 
        case 96: 
        case 98: 
        case 99: 
        case 101: 
        case 104: 
        case 105: 
        case 106: 
        case 108: 
        case 110: 
        case 112: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 122: 
        case 123: 
        case 126: 
        case 127: 
        case 128: 
        case 129: 
        case 134: 
        case 136: 
        case 137: 
        case 140: 
        case 141: 
          {  return symbolFactory.newSymbol("ID", ID, yytext());  }
        case 155: break;
        case 131: 
          {  return symbolFactory.newSymbol("WHILE", WHILE);  }
        case 156: break;
        case 130: 
          {  return symbolFactory.newSymbol("WRITE", WRITE);  }
        case 157: break;
        case 125: 
          {  return symbolFactory.newSymbol("ELSIF", ELSIF);  }
        case 158: break;
        case 124: 
          {  return symbolFactory.newSymbol("BEGIN", BEGIN);  }
        case 159: break;
        case 121: 
          {  return symbolFactory.newSymbol("ARRAY", ARRAY);  }
        case 160: break;
        case 19: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 161: break;
        case 17: 
          {  return symbolFactory.newSymbol("EQUAL", EQUAL);  }
        case 162: break;
        case 16: 
          {  return symbolFactory.newSymbol("COLON", COLON);  }
        case 163: break;
        case 23: 
          {  return symbolFactory.newSymbol("LBRKT", LBRKT);  }
        case 164: break;
        case 24: 
          {  return symbolFactory.newSymbol("RBRKT", RBRKT);  }
        case 165: break;
        case 2: 
        case 3: 
          {  /* Ignore */  }
        case 166: break;
        case 49: 
          {  return symbolFactory.newSymbol("LSQBKTLESS", LSQBKTLESS);  }
        case 167: break;
        case 97: 
          {  return symbolFactory.newSymbol("MOD", MOD);  }
        case 168: break;
        case 93: 
          {  return symbolFactory.newSymbol("FOR", FOR);  }
        case 169: break;
        case 90: 
          {  return symbolFactory.newSymbol("VAR", VAR);  }
        case 170: break;
        case 86: 
          {  return symbolFactory.newSymbol("END", END);  }
        case 171: break;
        case 81: 
          {  return symbolFactory.newSymbol("DIV", DIV);  }
        case 172: break;
        case 80: 
          {  return symbolFactory.newSymbol("NOT", NOT);  }
        case 173: break;
        case 78: 
          {  return symbolFactory.newSymbol("AND", AND);  }
        case 174: break;
        case 20: 
          {  return symbolFactory.newSymbol("DOT", DOT);  }
        case 175: break;
        case 12: 
          {  return symbolFactory.newSymbol("ADD", ADD);  }
        case 176: break;
        case 11: 
          {  return symbolFactory.newSymbol("SUB", SUB); }
        case 177: break;
        case 114: 
          {  return symbolFactory.newSymbol("THEN", THEN);  }
        case 178: break;
        case 113: 
          {  return symbolFactory.newSymbol("TYPE", TYPE);  }
        case 179: break;
        case 111: 
          {  return symbolFactory.newSymbol("LOOP", LOOP);  }
        case 180: break;
        case 109: 
          {  return symbolFactory.newSymbol("EXIT", EXIT);  }
        case 181: break;
        case 107: 
          {  return symbolFactory.newSymbol("ELSE", ELSE);  }
        case 182: break;
        case 103: 
          {  return symbolFactory.newSymbol("REAL", REAL);  }
        case 183: break;
        case 102: 
          {  return symbolFactory.newSymbol("READ", READ);  }
        case 184: break;
        case 14: 
          {  return symbolFactory.newSymbol("LESS", LESS);  }
        case 185: break;
        case 5: 
          {  return symbolFactory.newSymbol("MULT", MULT);  }
        case 186: break;
        case 44: 
          {  return symbolFactory.newSymbol("DIFF", DIFF);  }
        case 187: break;
        case 142: 
          {  return symbolFactory.newSymbol("PROCEDURE", PROCEDURE);  }
        case 188: break;
        case 18: 
          {  return symbolFactory.newSymbol("SEMICOLON", SEMICOLON);  }
        case 189: break;
        case 46: 
          {  return symbolFactory.newSymbol("GREATEREQ", GREATEREQ);  }
        case 190: break;
        case 135: 
          {  return symbolFactory.newSymbol("STRING", STRING);  }
        case 191: break;
        case 133: 
          {  return symbolFactory.newSymbol("RECORD", RECORD);  }
        case 192: break;
        case 132: 
          {  return symbolFactory.newSymbol("RETURN", RETURN);  }
        case 193: break;
        case 13: 
          {  return symbolFactory.newSymbol("DIVIDE", DIVIDE);  }
        case 194: break;
        case 4: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 195: break;
        case 6: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 196: break;
        case 21: 
          {  return symbolFactory.newSymbol("LSQBKT", LSQBKT);  }
        case 197: break;
        case 22: 
          {  return symbolFactory.newSymbol("RSQBKT", RSQBKT);  }
        case 198: break;
        case 43: 
          {  return symbolFactory.newSymbol("STRING",STRING);  }
        case 199: break;
        case 45: 
          {  return symbolFactory.newSymbol("LESSEQ", LESSEQ);  }
        case 200: break;
        case 48: 
          {  return symbolFactory.newSymbol("ASSIGN", ASSIGN);  }
        case 201: break;
        case 1: 
        case 7: 
          {  System.out.println("ERROR");error(yytext());  }
        case 202: break;
        case 9: 
        case 10: 
          {  return symbolFactory.newSymbol("NUMERIC_CONSTANT", NUMERIC_CONSTANT, new Integer(Integer.parseInt(yytext())));  }
        case 203: break;
        case 119: 
        case 120: 
          {  }
        case 204: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
            switch (yy_lexical_state) {
            case YYINITIAL:
              {  return symbolFactory.newSymbol("EOF", EOF);  }
            case 144: break;
            default:
              { return new java_cup.runtime.Symbol(sym.EOF); }
            }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
